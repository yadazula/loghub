// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, kb, ko, _;

  kb = !window.kb && (typeof require !== 'undefined') ? require('knockback') : window.kb;

  _ = kb._;

  Backbone = kb.Backbone;

  ko = kb.ko;

  /*
    knockback_default_wrapper.js
    (c) 2011, 2012 Kevin Malakoff.
    Knockback.DefaultWrapper is freely distributable under the MIT license.
    See the following for full license details:
      https://github.com/kmalakoff/knockback/blob/master/LICENSE
  */


  kb.DefaultWrapper = (function() {

    function DefaultWrapper(target_observable, dv) {
      var observable,
        _this = this;
      this.dv = dv;
      observable = kb.utils.wrappedObservable(this, ko.dependentObservable({
        read: function() {
          var current_target;
          if ((current_target = ko.utils.unwrapObservable(target_observable()))) {
            return current_target;
          } else {
            return ko.utils.unwrapObservable(_this.dv);
          }
        },
        write: function(value) {
          return target_observable(value);
        }
      }));
      observable.destroy = _.bind(this.destroy, this);
      observable.setToDefault = _.bind(this.setToDefault, this);
      return observable;
    }

    DefaultWrapper.prototype.destroy = function() {
      return kb.utils.wrappedDestroy(this);
    };

    DefaultWrapper.prototype.setToDefault = function() {
      return kb.utils.wrappedObservable(this)(this.dv);
    };

    return DefaultWrapper;

  })();

  kb.defaultWrapper = function(target, default_value) {
    return new kb.DefaultWrapper(target, default_value);
  };

  /*
    knockback-extensions.js (knockback-defaults)
    (c) 2011, 2012 Kevin Malakoff.
    Knockback.js is freely distributable under the MIT license.
    See the following for full license details:
      https://github.com/kmalakoff/knockback/blob/master/LICENSE
    Dependencies: Knockout.js, Backbone.js, and Underscore.js.
      Optional dependency: Backbone.ModelRef.js.
  */


  kb.Observable.prototype.setToDefault = function() {
    var _ref;
    if ((_ref = this.__kb_value) != null) {
      if (typeof _ref.setToDefault === "function") {
        _ref.setToDefault();
      }
    }
    return this;
  };

  kb.ViewModel.prototype.setToDefault = function() {
    var vm_key, _ref;
    for (vm_key in this.__kb.vm_keys) {
      if ((_ref = this[vm_key]) != null) {
        if (typeof _ref.setToDefault === "function") {
          _ref.setToDefault();
        }
      }
    }
    return this;
  };

  kb.utils.setToDefault = function(obj) {
    var key, value;
    if (!obj) {
      return;
    }
    if (ko.isObservable(obj)) {
      if (typeof obj.setToDefault === "function") {
        obj.setToDefault();
      }
    } else if (_.isObject(obj)) {
      for (key in obj) {
        value = obj[key];
        if (value && (ko.isObservable(value) || (typeof value !== 'function')) && ((key[0] !== '_') || key.search('__kb'))) {
          this.setToDefault(value);
        }
      }
    }
    return obj;
  };

}).call(this);
